from __future__ import annotations

import os
from pathlib import Path
import click
from rich.console import Console
from rich.panel import Panel
from slugify import slugify

from .utils import run_ffmpeg_extract_audio, ensure_directory_exists
from .gemini_transcribe import (
    transcribe_audio_with_gemini,
    write_srt,
    naive_chunk_to_segments,
)
from .article_generator import generate_news_article, write_article_markdown
from .tts import synthesize_podcast_mp3, tag_mp3


console = Console()


@click.command()
@click.option("--video", "video_path", type=click.Path(exists=True, dir_okay=False), required=True, help="入力動画ファイル")
@click.option("--out", "out_dir", type=click.Path(file_okay=False), default="./out", show_default=True)
@click.option("--model", "model_name", type=str, default="gemini-1.5-pro", show_default=True)
@click.option("--title", "title", type=str, default=None, help="記事/ポッドキャストのタイトル（省略可）")
def main(video_path: str, out_dir: str, model_name: str, title: str | None) -> None:
    console.print(Panel.fit("ローカル動画→文字起こし→ニュース記事→ポッドキャスト 生成CLI", title="Gemini Workflow"))

    out = ensure_directory_exists(out_dir)

    # 1) Extract audio
    console.log("音声抽出中 (ffmpeg)...")
    audio_path = out / "audio.wav"
    run_ffmpeg_extract_audio(video_path, audio_path, sample_rate_hz=16000, channels=1)

    # 2) Transcribe via Gemini
    console.log("Gemini 文字起こし中...")
    transcript_text = transcribe_audio_with_gemini(audio_path, model_name=model_name)
    (out / "transcript.txt").write_text(transcript_text, encoding="utf-8")

    segments = naive_chunk_to_segments(transcript_text)
    write_srt(segments, out / "transcript.srt")

    # 3) Article generation
    console.log("ニュース記事を生成中...")
    article = generate_news_article(transcript_text, model_name=model_name)
    article_path = write_article_markdown(article, out / "article.md")

    # 4) Podcast TTS
    console.log("ポッドキャスト音声を生成中...")
    podcast_title = title or (article.splitlines()[0].strip("# ") if article else "AIニュース")
    podcast_mp3 = synthesize_podcast_mp3(article, out / "podcast.mp3", lang="ja")
    tag_mp3(podcast_mp3, title=podcast_title, comment="Generated by Gemini workflow")

    console.print("完了:")
    console.print(f"- {audio_path}")
    console.print(f"- {out / 'transcript.txt'}")
    console.print(f"- {out / 'transcript.srt'}")
    console.print(f"- {article_path}")
    console.print(f"- {podcast_mp3}")


if __name__ == "__main__":
    main()

